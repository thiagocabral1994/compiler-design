group jasmin;

program(name, functions, prefix) ::= <<
.source <prefix><name>
.class public output/<prefix><name>
.super java/lang/Object
    <functions; separator="\n\n">

    .method public static main([Ljava/lang/String;)V
        .limit stack 1
        invokestatic output/<prefix><name>/<prefix>main()V
        return
    .end method
>>

data(filename, name, fields, prefix) ::= <<
.source <prefix><filename>
.class public output/<prefix><filename>$<prefix><name>
.super java/lang/Object
    <fields; separator="\n">

    .method \<init>()V
        .limit stack 1
        .limit locals 1
        aload 0
        invokespecial java/lang/Object/\<init>()V
        return
    .end method
>>

field(type, name, prefix) ::= ".field <prefix><name> <type>"
param(type) ::= "<type>"

function_void(name, prefix, params, locals, commands, stack) ::= <<
.method static <prefix><name>(<params>)V
    .limit stack <stack>
    .limit locals <locals>
    
    <if(commands)><commands; separator="\n\n"><endif>
    return
.end method
>>

function(name, prefix, params, locals, commands, stack) ::= <<
.method static <prefix><name>(<params>)[Ljava/lang/Object;
    .limit stack <stack>
    .limit locals <locals>
    
    <if(commands)><commands; separator="\n\n"><endif>
.end method
>>

array_type(type) ::= "[<type>"
int_type() ::= "I"
float_type() ::= "F"
boolean_type() ::= "Z"
char_type() ::= "C"
custom_type(filename, name, prefix) ::= "Loutput/<prefix><filename>$<prefix><name>;"

print_int(exp) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<exp>
invokevirtual java/io/PrintStream/print(I)V
>>

print_float(exp) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<exp>
invokevirtual java/io/PrintStream/print(F)V
>>

print_bool(exp) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<exp>
invokevirtual java/io/PrintStream/print(Z)V
>>

print_char(exp) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<exp>
invokevirtual java/io/PrintStream/print(C)V
>>

read_int(lvalue, scanner) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init>(Ljava/io/InputStream;)V
astore <scanner>
aload <scanner>
invokevirtual java/util/Scanner/nextInt()I
istore <lvalue>
aload <scanner>
invokevirtual java/util/Scanner/close()V
>>


read_float(lvalue, scanner) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init>(Ljava/io/InputStream;)V
astore <scanner>
aload <scanner>
invokevirtual java/util/Scanner/nextFloat()F
fstore_<lvalue>
aload <scanner>
invokevirtual java/util/Scanner/close()V
>>


read_bool(lvalue, scanner) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init>(Ljava/io/InputStream;)V
astore <scanner>
aload <scanner>
invokevirtual java/util/Scanner/nextBoolean()Z
istore <lvalue>
aload <scanner>
invokevirtual java/util/Scanner/close()V
>>


read_char(lvalue, scanner) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init>(Ljava/io/InputStream;)V
astore <scanner>
aload <scanner>
invokevirtual java/util/Scanner/next()Ljava/lang/String;
iconst_0
invokevirtual java/lang/String/charAt(I)C
istore <lvalue>
aload <scanner>
invokevirtual java/util/Scanner/close()V
>>

return(exps, size, size_label) ::= <<
sipush <size>
anewarray java/lang/Object
astore <size_label> 

<exps; separator="\n\n">

aload <size_label>
areturn
>>

return_attr(size_label, index, exp, return_attr_type) ::= <<
aload <size_label>
sipush <index>
<exp>
<return_attr_type>
aastore
>>

return_attr_int() ::= <<
invokestatic java/lang/Integer/valueOf(I)Ljava/lang/Integer;
>>

return_attr_char() ::= <<
invokestatic java/lang/Character/valueOf(C)Ljava/lang/Character;
>>

return_attr_bool() ::= <<
invokestatic java/lang/Boolean/valueOf(Z)Ljava/lang/Boolean;
>>

return_attr_float() ::= <<
invokestatic java/lang/Float/valueOf(F)Ljava/lang/Float;
>>

list_command(commands) ::= <<
<if(commands)><commands; separator="\n"><endif>
>>

if(num, exp, thn, els) ::= <<
<exp>
ifeq #label_if<num>
<thn>
goto #label_if<num>#end
#label_if<num>:
<els>
#label_if<num>#end:
nop
>>

iterate(exp, thn, label_iterator, label_i) ::= <<
<exp>
istore <label_i>

#start<label_iterator>:
iload <label_i>
iconst_0
if_icmple #end<label_iterator>
<thn>
iinc <label_i> -1
goto #start<label_iterator>

#end<label_iterator>:
>>

assignment_int(lvalue, exp) ::= <<
<exp>
istore <lvalue>
>>

assignment_float(lvalue, exp) ::= <<
<exp>
fstore_<lvalue>
>>

assignment_char(lvalue, exp) ::= <<
<exp>
istore <lvalue>
>>

assignment_bool(lvalue, exp) ::= <<
<exp>
istore <lvalue>
>>

assignment_array(lvalue, exp) ::= <<
<exp>
astore <lvalue>
>>

assignment_custom(lvalue, exp) ::= <<
<exp>
astore <lvalue>
>>

assignment_attribute(exp, lvalue, type, prefix, name, return_type) ::= <<
<lvalue>
<exp>
putfield <type>/<prefix><name> <return_type>
>>

assignment_array_index(exp, lvalue, index_exp, store) ::= <<
<lvalue>
<index_exp>
<exp>
<store>
>>

lvalue_int(label) ::= <<
iload <label>
>>

lvalue_float(label) ::= <<
fload_<label>
>>

lvalue_bool(label) ::= <<
iload <label>
>>

lvalue_char(label) ::= <<
iload <label>
>>

lvalue_custom(label) ::= <<
aload <label>
>>

lvalue_array(label) ::= <<
aload <label>
>>

array_lvalue(lvalue, exp, load) ::= <<
<lvalue>
<exp>
<load>
>>

object_lvalue(lvalue, type, prefix, name, return_type) ::= <<
<lvalue>
getfield <type>/<prefix><name> <return_type>
>>

float_exp(value) ::= "ldc <value>"
int_exp(value) ::= "sipush <value>"
char_exp(value) ::= "bipush <value>"
null_exp() ::= "aconst_null"
true_exp() ::= "iconst_1"
false_exp() ::= "iconst_0"

new_array(exp, call) ::= <<
<exp>
<call>
>>

new_array_custom(offset, type) ::= <<
anewarray <offset: {o | [}><type>
>>

new_array_int() ::= <<
newarray int
>>

new_array_float() ::= <<
newarray float
>>

new_array_bool() ::= <<
newarray bool
>>

new_array_char() ::= <<
newarray char
>>

new_object(type) ::= <<
new <type>
dup
invokespecial <type>/\<init>()V
>>

call_void(args, prefix, filename, name, param_types) ::= <<
; Carregando os argumentos do método
<args; separator="\n">

; Invocação estática do método
invokestatic output/<prefix><filename>/<prefix><name>(<param_types>)V
>>

call_void_return_pop(args, prefix, filename, name, param_types) ::= <<
; Carregando os argumentos do método
<args; separator="\n">

; Invocação estática do método
invokestatic output/<prefix><filename>/<prefix><name>(<param_types>)[Ljava/lang/Object;
pop
>>

call_return(args, prefix, filename, name, param_types, return_size, return_attr) ::= <<
; Carregando os argumentos do método
<args; separator="\n">

; Invocação estática do método
invokestatic output/<prefix><filename>/<prefix><name>(<param_types>)[Ljava/lang/Object;
astore <return_size>

<return_attr; separator="\n\n">
>>

call_return_attr(return_size, store, index, cast, return_label) ::= <<
; Atribuição do retorno da função
aload <return_size>
sipush <index>
aaload
<cast>
<store>_<return_label>
>>

call_exp(args, prefix, filename, name, param_types, return_type, exp, cast) ::= <<
; Carregando os argumentos do método
<args; separator="\n">

; Invocação estática do método
invokestatic output/<prefix><filename>/<prefix><name>(<param_types>)<return_type>

; Atribuição do retorno da função
sipush <exp>
aaload
<cast>
>>

cast_char() ::= <<
checkcast java/lang/Character
invokevirtual java/lang/Character/charValue()C
>>

cast_int() ::= <<
checkcast java/lang/Integer
invokevirtual java/lang/Integer/intValue()I
>>

cast_float() ::= <<
checkcast java/lang/Float
invokevirtual java/lang/Float/floatValue()F
>>

cast_bool() ::= <<
checkcast java/lang/Boolean
invokevirtual java/lang/Boolean/booleanValue()Z
>>

parenthesis_exp(exp) ::= <<
<exp>
>>

add_int(left_exp, right_exp) ::= <<
<left_exp>
<right_exp>
iadd
>>

add_float(left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
fadd
>>

sub_int(left_exp, right_exp) ::= <<
<left_exp>
<right_exp>
isub
>>

sub_float(left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
fsub
>>

mult_int(left_exp, right_exp) ::= <<
<left_exp>
<right_exp>
imul
>>

mult_float(left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
fmul
>>

div_int(left_exp, right_exp) ::= <<
<left_exp>
<right_exp>
idiv
>>

div_float(left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
fdiv
>>


mod_int(left_exp, right_exp) ::= <<
<left_exp>
<right_exp>
irem
>>

mod_float(left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
frem
>>



lt_exp(num, left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
fcmpg
ifge #label_lt<num>
iconst_1
goto #label_lt<num>#<num>
#label_lt<num>:
iconst_0
#label_lt<num>#<num>:
>>

equals_exp(num, left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
fcmpl
ifne #label_eq<num>
iconst_1
goto #label_eq<num>#<num>
#label_eq<num>:
iconst_0
#label_eq<num>#<num>:
>>

not_equals_exp(num, left_exp, convertL, right_exp, convertR) ::= <<
<left_exp>
<if(convertL)><convertL><endif>
<right_exp>
<if(convertR)><convertR><endif>
fcmpl
ifne #label_neq<num>
iconst_0
goto #label_neq<num>#<num>
#label_neq<num>:
iconst_1
#label_neq<num>#<num>:
>>

and_exp(left_exp, right_exp) ::= <<
<left_exp>
<right_exp>
iand
>>

not_exp(exp) ::= <<
<exp>
iconst_1
ixor
>>

neg_int(exp) ::= <<
iconst_0
<exp>
isub
>>

neg_float(exp) ::= <<
fconst_0
<exp>
fsub
>>
